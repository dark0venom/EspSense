/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _GSSD_H_RPCGEN
#define	_GSSD_H_RPCGEN

#include <rpc/rpc.h>
#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _KERNEL
#include <kgssapi/gssapi.h>
#else
#include <gssapi/gssapi.h>
#endif
extern bool_t xdr_gss_buffer_desc(XDR *xdrs, gss_buffer_desc *buf);
extern bool_t xdr_gss_OID_desc(XDR *xdrs, gss_OID_desc *oid);
extern bool_t xdr_gss_OID(XDR *xdrs, gss_OID *oidp);
extern bool_t xdr_gss_OID_set_desc(XDR *xdrs, gss_OID_set_desc *set);
extern bool_t xdr_gss_OID_set(XDR *xdrs, gss_OID_set *setp);
extern bool_t xdr_gss_channel_bindings_t(XDR *xdrs, gss_channel_bindings_t *chp);

typedef uint64_t gssd_ctx_id_t;

typedef uint64_t gssd_cred_id_t;

typedef uint64_t gssd_name_t;

struct init_sec_context_res {
	uint32_t major_status;
	uint32_t minor_status;
	gssd_ctx_id_t ctx;
	gss_OID actual_mech_type;
	gss_buffer_desc output_token;
	uint32_t ret_flags;
	uint32_t time_rec;
};
typedef struct init_sec_context_res init_sec_context_res;

struct init_sec_context_args {
	uint32_t uid;
	gssd_cred_id_t cred;
	gssd_ctx_id_t ctx;
	gssd_name_t name;
	gss_OID mech_type;
	uint32_t req_flags;
	uint32_t time_req;
	gss_channel_bindings_t input_chan_bindings;
	gss_buffer_desc input_token;
};
typedef struct init_sec_context_args init_sec_context_args;

struct accept_sec_context_res {
	uint32_t major_status;
	uint32_t minor_status;
	gssd_ctx_id_t ctx;
	gssd_name_t src_name;
	gss_OID mech_type;
	gss_buffer_desc output_token;
	uint32_t ret_flags;
	uint32_t time_rec;
	gssd_cred_id_t delegated_cred_handle;
};
typedef struct accept_sec_context_res accept_sec_context_res;

struct accept_sec_context_args {
	gssd_ctx_id_t ctx;
	gssd_cred_id_t cred;
	gss_buffer_desc input_token;
	gss_channel_bindings_t input_chan_bindings;
};
typedef struct accept_sec_context_args accept_sec_context_args;

struct delete_sec_context_res {
	uint32_t major_status;
	uint32_t minor_status;
	gss_buffer_desc output_token;
};
typedef struct delete_sec_context_res delete_sec_context_res;

struct delete_sec_context_args {
	gssd_ctx_id_t ctx;
};
typedef struct delete_sec_context_args delete_sec_context_args;

enum sec_context_format {
	KGSS_HEIMDAL_0_6 = 0,
	KGSS_HEIMDAL_1_1 = 1
};
typedef enum sec_context_format sec_context_format;

struct export_sec_context_res {
	uint32_t major_status;
	uint32_t minor_status;
	enum sec_context_format format;
	gss_buffer_desc interprocess_token;
};
typedef struct export_sec_context_res export_sec_context_res;

struct export_sec_context_args {
	gssd_ctx_id_t ctx;
};
typedef struct export_sec_context_args export_sec_context_args;

struct import_name_res {
	uint32_t major_status;
	uint32_t minor_status;
	gssd_name_t output_name;
};
typedef struct import_name_res import_name_res;

struct import_name_args {
	gss_buffer_desc input_name_buffer;
	gss_OID input_name_type;
};
typedef struct import_name_args import_name_args;

struct canonicalize_name_res {
	uint32_t major_status;
	uint32_t minor_status;
	gssd_name_t output_name;
};
typedef struct canonicalize_name_res canonicalize_name_res;

struct canonicalize_name_args {
	gssd_name_t input_name;
	gss_OID mech_type;
};
typedef struct canonicalize_name_args canonicalize_name_args;

struct export_name_res {
	uint32_t major_status;
	uint32_t minor_status;
	gss_buffer_desc exported_name;
};
typedef struct export_name_res export_name_res;

struct export_name_args {
	gssd_name_t input_name;
};
typedef struct export_name_args export_name_args;

struct release_name_res {
	uint32_t major_status;
	uint32_t minor_status;
};
typedef struct release_name_res release_name_res;

struct release_name_args {
	gssd_name_t input_name;
};
typedef struct release_name_args release_name_args;

struct pname_to_uid_res {
	uint32_t major_status;
	uint32_t minor_status;
	uint32_t uid;
	uint32_t gid;
	struct {
		u_int gidlist_len;
		uint32_t *gidlist_val;
	} gidlist;
};
typedef struct pname_to_uid_res pname_to_uid_res;

struct pname_to_uid_args {
	gssd_name_t pname;
	gss_OID mech;
};
typedef struct pname_to_uid_args pname_to_uid_args;

struct acquire_cred_res {
	uint32_t major_status;
	uint32_t minor_status;
	gssd_cred_id_t output_cred;
	gss_OID_set actual_mechs;
	uint32_t time_rec;
};
typedef struct acquire_cred_res acquire_cred_res;

struct acquire_cred_args {
	uint32_t uid;
	gssd_name_t desired_name;
	uint32_t time_req;
	gss_OID_set desired_mechs;
	int cred_usage;
};
typedef struct acquire_cred_args acquire_cred_args;

struct set_cred_option_res {
	uint32_t major_status;
	uint32_t minor_status;
};
typedef struct set_cred_option_res set_cred_option_res;

struct set_cred_option_args {
	gssd_cred_id_t cred;
	gss_OID option_name;
	gss_buffer_desc option_value;
};
typedef struct set_cred_option_args set_cred_option_args;

struct release_cred_res {
	uint32_t major_status;
	uint32_t minor_status;
};
typedef struct release_cred_res release_cred_res;

struct release_cred_args {
	gssd_cred_id_t cred;
};
typedef struct release_cred_args release_cred_args;

struct display_status_res {
	uint32_t major_status;
	uint32_t minor_status;
	uint32_t message_context;
	gss_buffer_desc status_string;
};
typedef struct display_status_res display_status_res;

struct display_status_args {
	uint32_t status_value;
	int status_type;
	gss_OID mech_type;
	uint32_t message_context;
};
typedef struct display_status_args display_status_args;

#define	GSSD ((unsigned long)(0x40677373))
#define	GSSDVERS ((unsigned long)(1))

extern  void gssd_1(struct svc_req *rqstp, SVCXPRT *transp);
#define	GSSD_NULL ((unsigned long)(0))
extern  enum clnt_stat gssd_null_1(void *, void *, CLIENT *);
extern  bool_t gssd_null_1_svc(void *, void *, struct svc_req *);
#define	GSSD_INIT_SEC_CONTEXT ((unsigned long)(1))
extern  enum clnt_stat gssd_init_sec_context_1(init_sec_context_args *, init_sec_context_res *, CLIENT *);
extern  bool_t gssd_init_sec_context_1_svc(init_sec_context_args *, init_sec_context_res *, struct svc_req *);
#define	GSSD_ACCEPT_SEC_CONTEXT ((unsigned long)(2))
extern  enum clnt_stat gssd_accept_sec_context_1(accept_sec_context_args *, accept_sec_context_res *, CLIENT *);
extern  bool_t gssd_accept_sec_context_1_svc(accept_sec_context_args *, accept_sec_context_res *, struct svc_req *);
#define	GSSD_DELETE_SEC_CONTEXT ((unsigned long)(3))
extern  enum clnt_stat gssd_delete_sec_context_1(delete_sec_context_args *, delete_sec_context_res *, CLIENT *);
extern  bool_t gssd_delete_sec_context_1_svc(delete_sec_context_args *, delete_sec_context_res *, struct svc_req *);
#define	GSSD_EXPORT_SEC_CONTEXT ((unsigned long)(4))
extern  enum clnt_stat gssd_export_sec_context_1(export_sec_context_args *, export_sec_context_res *, CLIENT *);
extern  bool_t gssd_export_sec_context_1_svc(export_sec_context_args *, export_sec_context_res *, struct svc_req *);
#define	GSSD_IMPORT_NAME ((unsigned long)(5))
extern  enum clnt_stat gssd_import_name_1(import_name_args *, import_name_res *, CLIENT *);
extern  bool_t gssd_import_name_1_svc(import_name_args *, import_name_res *, struct svc_req *);
#define	GSSD_CANONICALIZE_NAME ((unsigned long)(6))
extern  enum clnt_stat gssd_canonicalize_name_1(canonicalize_name_args *, canonicalize_name_res *, CLIENT *);
extern  bool_t gssd_canonicalize_name_1_svc(canonicalize_name_args *, canonicalize_name_res *, struct svc_req *);
#define	GSSD_EXPORT_NAME ((unsigned long)(7))
extern  enum clnt_stat gssd_export_name_1(export_name_args *, export_name_res *, CLIENT *);
extern  bool_t gssd_export_name_1_svc(export_name_args *, export_name_res *, struct svc_req *);
#define	GSSD_RELEASE_NAME ((unsigned long)(8))
extern  enum clnt_stat gssd_release_name_1(release_name_args *, release_name_res *, CLIENT *);
extern  bool_t gssd_release_name_1_svc(release_name_args *, release_name_res *, struct svc_req *);
#define	GSSD_PNAME_TO_UID ((unsigned long)(9))
extern  enum clnt_stat gssd_pname_to_uid_1(pname_to_uid_args *, pname_to_uid_res *, CLIENT *);
extern  bool_t gssd_pname_to_uid_1_svc(pname_to_uid_args *, pname_to_uid_res *, struct svc_req *);
#define	GSSD_ACQUIRE_CRED ((unsigned long)(10))
extern  enum clnt_stat gssd_acquire_cred_1(acquire_cred_args *, acquire_cred_res *, CLIENT *);
extern  bool_t gssd_acquire_cred_1_svc(acquire_cred_args *, acquire_cred_res *, struct svc_req *);
#define	GSSD_SET_CRED_OPTION ((unsigned long)(11))
extern  enum clnt_stat gssd_set_cred_option_1(set_cred_option_args *, set_cred_option_res *, CLIENT *);
extern  bool_t gssd_set_cred_option_1_svc(set_cred_option_args *, set_cred_option_res *, struct svc_req *);
#define	GSSD_RELEASE_CRED ((unsigned long)(12))
extern  enum clnt_stat gssd_release_cred_1(release_cred_args *, release_cred_res *, CLIENT *);
extern  bool_t gssd_release_cred_1_svc(release_cred_args *, release_cred_res *, struct svc_req *);
#define	GSSD_DISPLAY_STATUS ((unsigned long)(13))
extern  enum clnt_stat gssd_display_status_1(display_status_args *, display_status_res *, CLIENT *);
extern  bool_t gssd_display_status_1_svc(display_status_args *, display_status_res *, struct svc_req *);
extern int gssd_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

/* the xdr functions */
extern  bool_t xdr_gssd_ctx_id_t(XDR *, gssd_ctx_id_t*);
extern  bool_t xdr_gssd_cred_id_t(XDR *, gssd_cred_id_t*);
extern  bool_t xdr_gssd_name_t(XDR *, gssd_name_t*);
extern  bool_t xdr_init_sec_context_res(XDR *, init_sec_context_res*);
extern  bool_t xdr_init_sec_context_args(XDR *, init_sec_context_args*);
extern  bool_t xdr_accept_sec_context_res(XDR *, accept_sec_context_res*);
extern  bool_t xdr_accept_sec_context_args(XDR *, accept_sec_context_args*);
extern  bool_t xdr_delete_sec_context_res(XDR *, delete_sec_context_res*);
extern  bool_t xdr_delete_sec_context_args(XDR *, delete_sec_context_args*);
extern  bool_t xdr_sec_context_format(XDR *, sec_context_format*);
extern  bool_t xdr_export_sec_context_res(XDR *, export_sec_context_res*);
extern  bool_t xdr_export_sec_context_args(XDR *, export_sec_context_args*);
extern  bool_t xdr_import_name_res(XDR *, import_name_res*);
extern  bool_t xdr_import_name_args(XDR *, import_name_args*);
extern  bool_t xdr_canonicalize_name_res(XDR *, canonicalize_name_res*);
extern  bool_t xdr_canonicalize_name_args(XDR *, canonicalize_name_args*);
extern  bool_t xdr_export_name_res(XDR *, export_name_res*);
extern  bool_t xdr_export_name_args(XDR *, export_name_args*);
extern  bool_t xdr_release_name_res(XDR *, release_name_res*);
extern  bool_t xdr_release_name_args(XDR *, release_name_args*);
extern  bool_t xdr_pname_to_uid_res(XDR *, pname_to_uid_res*);
extern  bool_t xdr_pname_to_uid_args(XDR *, pname_to_uid_args*);
extern  bool_t xdr_acquire_cred_res(XDR *, acquire_cred_res*);
extern  bool_t xdr_acquire_cred_args(XDR *, acquire_cred_args*);
extern  bool_t xdr_set_cred_option_res(XDR *, set_cred_option_res*);
extern  bool_t xdr_set_cred_option_args(XDR *, set_cred_option_args*);
extern  bool_t xdr_release_cred_res(XDR *, release_cred_res*);
extern  bool_t xdr_release_cred_args(XDR *, release_cred_args*);
extern  bool_t xdr_display_status_res(XDR *, display_status_res*);
extern  bool_t xdr_display_status_args(XDR *, display_status_args*);

#ifdef __cplusplus
}
#endif

#endif /* !_GSSD_H_RPCGEN */
